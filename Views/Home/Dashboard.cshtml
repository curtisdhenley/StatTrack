@model DashboardViewModel

@using StatTracker.Models.Enums;
@using Microsoft.AspNetCore.Identity
@using StatTracker.Services.Interfaces

@inject SignInManager<BTUser> SignInManager
@inject UserManager<BTUser> UserManager
@inject IBTRolesService RoleService

@{
    ViewData["Title"] = "Dashboard";
    @* Instantiate the btUser *@
    BTUser? btUser = await UserManager.GetUserAsync(User);
}

<h1>Dashboard</h1>
<a href="javascript:void(0);">
    @* User Info *@
    [Code: Copy from Ticket/Details]
</a>
@* Get The btUser FullName *@
<strong>@btUser!.FullName</strong>
<span class="text-muted" style="font-size:x-small;">
    @* Company Name *@
    <strong>@Model.Company!.Name</strong>
</span>


<div>
    <div classxfont-weighteighteightgetainer-fluid">

        <!-- Info Pills -->
        <div class="row mt-2">
            <div class="col-lg-3 col-md-6 col-sm-6">
                <a asp-action="AllProjects" asp-controller="Projects" style="text-decoration:none">
                    <div class="card text-center bg-info">
                        <div class="body">
                            <div class="p-15 text-light">
                                <h3>@Model.Projects!.Where(p => p.StartDate < DateTime.Now && p.EndDate > DateTime.Now).Count()</h3>
                                <span>Active Projects</span>
                            </div>
                        </div>
                    </div>
                </a>
            </div>
            <div class="col-lg-3 col-md-6 col-sm-6">
                <a asp-action="AllTickets" asp-controller="Tickets" style="text-decoration:none">
                    <div class="card text-center bg-secondary">
                        <div class="body">
                            <div class="p-15 text-light">

                                <h3>@Model.Tickets!.Count()</h3>
                                <span>Total Tickets</span>
                            </div>
                        </div>
                    </div>
                </a>
            </div>
            <div class="col-lg-3 col-md-6 col-sm-6">
                <div class="card text-center bg-warning">
                    <div class="body">
                        <div class="p-15 text-light">
                            <h3>@Model.Tickets!.Where(t => string.IsNullOrEmpty(t.DeveloperUserId)).Count()</h3>
                            <span>Unassigned Tickets</span>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-lg-3 col-md-6 col-sm-6">
                <div class="card text-center bg-dark">
                    <div class="body">
                        <div class="p-15 text-light">
                            <h3>
                                @(
                                    Model.Projects!.Count()
                                    + Model.Tickets!.Count()
                                    + Model.Members!.Count()
                                    )
                            </h3>
                            <span>Total Data</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>


        <div class="row gy-2">
            <div class="col-md-12 col">
                <div class="row col-cols-4 mt-5 bg-secondary">
                    <div class="card col m-1 p-2">
                        <div class="card-body">
                            <h5>Chart 1</h5>
                            <p>[Projects]</p>
                        </div>
                    </div>
                    <div class="card col m-1 p-2">
                        <div class="card-body">
                            <h5>Chart 2</h5>
                            <p>[Projects]</p>
                        </div>
                    </div>
                    <div class="card col m-1 p-2">
                        <div class="card-body">
                            <h5>Tickets by Priority</h5>
                            <p>[Morris Charts]</p>
                            <!-- Morris: Donut -->
                            <div class="col-md-12">
                                <div id="legend" class="donut-legend" style="font-size:x-small"></div>
                            </div>
                            <div class="col-md-12">
                                <div class="chart chart-md" id="morrisTicketPriority"></div>
                            </div>
                        </div>
                    </div>
                    <div class="card col m-1 p-2">
                        <div class="card-body">
                            <h5>Chart 4</h5>
                            <p>[Tickets]</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="row gy-2">
            <div class="cols mt-5 bg-secondary">
                <div class="card col m-1 p-2">
                    <div class="card-body" style="height:380px">
                        <h5>Chart 5</h5>
                        <p>[Projects: Tickets vs Developers]</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <hr />
    <div class="mt-5 ">
        <div class="row">
            @* Projects Table *@
            <div class="col">
                <div class="bg-secondary">
                    <div class="card m-1 p-2">
                        <div class="card-header">
                            <h2>Projects</h2>
                        </div>
                        <div class="card-body">
                            @* [Copy and format table from Unassigned Tickets] *@
                        </div>
                        <div class="card-footer">
                        </div>
                    </div>
                </div>
            </div>
            @* Tickets Table *@
            <div class="col">
                <div class="bg-secondary">
                    <div class="card m-1 p-2">
                        <div class="card-header">
                            <h2>Tickets</h2>
                        </div>
                        <div class="card-body">

                            @* Copy and format table from Unassigned Tickets *@
                        </div>
                        <div class="card-footer">
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-2 ">
                <div class="bg-dark">
                    <div class="card m-1 p-2">
                        <div class="card-header">
                            <h2>Members</h2>
                            <hr />
                        </div>
                        <div class="card-body" style="overflow-y:auto;height:600px;background-color:antiquewhite">
                            @foreach (BTUser member in Model.Members!)
                            {
                                @* Loop over Company members. Display Name and Role *@
                                string? userRole = (await RoleService.GetUserRolesAsync(member)).FirstOrDefault();

                                @Html.DisplayFor(modelItem => member.FullName) <br />
                                @Html.DisplayFor(modelItem => userRole)
                                <hr />
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@* Morris Donut Chart *@
<script src="//cdnjs.cloudflare.com/ajax/libs/raphael/2.1.0/raphael-min.js"></script>
<script src="//cdnjs.cloudflare.com/ajax/libs/morris.js/0.5.1/morris.min.js"></script>
<script>

    var morrisDonutData = [{
        label: "Low",
        value: @Model.Tickets!.Where(t=>t.TicketPriority!.Name == nameof(BTTicketPriorities.Low)).Count()
            }, {
        label: "Medium",
        value: @Model.Tickets!.Where(t=>t.TicketPriority!.Name == nameof(BTTicketPriorities.Medium)).Count()
            }, {
        label: "High",
        value: @Model.Tickets!.Where(t=>t.TicketPriority!.Name == nameof(BTTicketPriorities.High)).Count()
            }, {
        label: "Urgent",
        value: @Model.Tickets!.Where(t=>t.TicketPriority!.Name == nameof(BTTicketPriorities.Urgent)).Count()
            }];


    /*
    Morris: Donut
    */
    if ($('#morrisTicketPriority').get(0)) {
        var donutChart = Morris.Donut({
            resize: true,
            element: 'morrisTicketPriority',
            data: morrisDonutData,
            colors: ['#0088cc', '#734ba9', '#E36159', '#ff993b']
        });

        donutChart.options.data.forEach(function (label, i) {
            var legendItem = $('<span></span>').text(label['label'] + ": " + label['value']).prepend('<span>&nbsp;</span>');
            legendItem.find('span')
                .css('backgroundColor', donutChart.options.colors[i])
                .css('width', '20px')
                .css('display', 'inline-block')
                .css('margin', '10px');
            $('#legend').append(legendItem)
        });
    };
</script>